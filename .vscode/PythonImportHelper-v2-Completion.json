[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HomeServices",
        "importPath": "services.HomeServices",
        "description": "services.HomeServices",
        "isExtraImport": true,
        "detail": "services.HomeServices",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "asyncpg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncpg",
        "description": "asyncpg",
        "detail": "asyncpg",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic ",
        "description": "pydantic ",
        "isExtraImport": true,
        "detail": "pydantic ",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "HomeServicesImpl",
        "importPath": "implementations.HomeServicesImpl",
        "description": "implementations.HomeServicesImpl",
        "isExtraImport": true,
        "detail": "implementations.HomeServicesImpl",
        "documentation": {}
    },
    {
        "label": "LLMMessageModel",
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "isExtraImport": true,
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LLMMessageRoleEnum",
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "isExtraImport": true,
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LLMModel",
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "isExtraImport": true,
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LLMModel",
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "isExtraImport": true,
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LlmModelServcies",
        "importPath": "services.LlmModelServcies",
        "description": "services.LlmModelServcies",
        "isExtraImport": true,
        "detail": "services.LlmModelServcies",
        "documentation": {}
    },
    {
        "label": "LlmModelServcies",
        "importPath": "services.LlmModelServcies",
        "description": "services.LlmModelServcies",
        "isExtraImport": true,
        "detail": "services.LlmModelServcies",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomMidlleware",
        "importPath": "middleware",
        "description": "middleware",
        "isExtraImport": true,
        "detail": "middleware",
        "documentation": {}
    },
    {
        "label": "homeControllerRouter",
        "importPath": "controllers.HomeController",
        "description": "controllers.HomeController",
        "isExtraImport": true,
        "detail": "controllers.HomeController",
        "documentation": {}
    },
    {
        "label": "EmbeddingServices",
        "importPath": "services.EmbeddingServices",
        "description": "services.EmbeddingServices",
        "isExtraImport": true,
        "detail": "services.EmbeddingServices",
        "documentation": {}
    },
    {
        "label": "PgDb",
        "importPath": "db.PgDb",
        "description": "db.PgDb",
        "isExtraImport": true,
        "detail": "db.PgDb",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "RequestResponseEndpoint",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "askQuestion",
        "kind": 2,
        "importPath": "controllers.HomeController",
        "description": "controllers.HomeController",
        "peekOfCode": "def askQuestion(question:str):\n    response = homeServices.llmAsk(question=question)\n    return response",
        "detail": "controllers.HomeController",
        "documentation": {}
    },
    {
        "label": "homeControllerRouter",
        "kind": 5,
        "importPath": "controllers.HomeController",
        "description": "controllers.HomeController",
        "peekOfCode": "homeControllerRouter = APIRouter()\nhomeServices:HomeServices = HomeServices()\n@homeControllerRouter.get(\"/ask/{question}\")\ndef askQuestion(question:str):\n    response = homeServices.llmAsk(question=question)\n    return response",
        "detail": "controllers.HomeController",
        "documentation": {}
    },
    {
        "label": "homeServices:HomeServices",
        "kind": 5,
        "importPath": "controllers.HomeController",
        "description": "controllers.HomeController",
        "peekOfCode": "homeServices:HomeServices = HomeServices()\n@homeControllerRouter.get(\"/ask/{question}\")\ndef askQuestion(question:str):\n    response = homeServices.llmAsk(question=question)\n    return response",
        "detail": "controllers.HomeController",
        "documentation": {}
    },
    {
        "label": "mongoClient",
        "kind": 5,
        "importPath": "db.MongoDb",
        "description": "db.MongoDb",
        "peekOfCode": "mongoClient = cast(Any, MongoClient(\"mongodb://localhost:27017/\"))",
        "detail": "db.MongoDb",
        "documentation": {}
    },
    {
        "label": "PgDb",
        "kind": 6,
        "importPath": "db.PgDb",
        "description": "db.PgDb",
        "peekOfCode": "class PgDb:\n    def __init__(self, db_url: str):\n        self.db_url = db_url\n        self.pool = None\n        self.asyncpg = cast(Any, pg)\n    async def connect(self) -> None:\n        self.pool = await self.asyncpg.create_pool(self.db_url)\n    async def close(self) -> None:\n        if self.pool is not None:\n            await self.pool.close()",
        "detail": "db.PgDb",
        "documentation": {}
    },
    {
        "label": "HomeServicesImpl",
        "kind": 6,
        "importPath": "implementations.HomeServicesImpl",
        "description": "implementations.HomeServicesImpl",
        "peekOfCode": "class HomeServicesImpl(ABC):\n    @abstractmethod\n    def llmAsk(self,question:str) -> JSONResponse:\n        pass",
        "detail": "implementations.HomeServicesImpl",
        "documentation": {}
    },
    {
        "label": "LLMMessageRoleEnum",
        "kind": 6,
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "peekOfCode": "class LLMMessageRoleEnum(str,Enum):\n    user = \"user\"\n    system = \"system\"\nclass LLMMessageModel(BM):\n    role: LLMMessageRoleEnum\n    content:str\nclass LLMModel(BM):\n    messages: list[LLMMessageModel]\n    # model: str = \"llama3-70b-8192\"\n    model: str = \"llama3-8b-8192\"",
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LLMMessageModel",
        "kind": 6,
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "peekOfCode": "class LLMMessageModel(BM):\n    role: LLMMessageRoleEnum\n    content:str\nclass LLMModel(BM):\n    messages: list[LLMMessageModel]\n    # model: str = \"llama3-70b-8192\"\n    model: str = \"llama3-8b-8192\"\n    temperature: float = 0.7\n    maxTokens:int = 1024\n    stream:bool=False",
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "LLMModel",
        "kind": 6,
        "importPath": "models.LlmModels",
        "description": "models.LlmModels",
        "peekOfCode": "class LLMModel(BM):\n    messages: list[LLMMessageModel]\n    # model: str = \"llama3-70b-8192\"\n    model: str = \"llama3-8b-8192\"\n    temperature: float = 0.7\n    maxTokens:int = 1024\n    stream:bool=False\n    jsonResponse:bool=False",
        "detail": "models.LlmModels",
        "documentation": {}
    },
    {
        "label": "EmbeddingServices",
        "kind": 6,
        "importPath": "services.EmbeddingServices",
        "description": "services.EmbeddingServices",
        "peekOfCode": "class EmbeddingServices:\n    model = cast(Any, SentenceTransformer(\"mixedbread-ai/mxbai-embed-large-v1\"))\n    @staticmethod\n    def convertTextToVector( text: str) -> list[float]:\n        vecotr = np.array(EmbeddingServices.model.encode(text)).reshape(1, -1)\n        return vecotr[0].astype(float).tolist()\n    @staticmethod\n    def convertObjectToVectors(\n         data: dict[str, Any]\n    ) -> dict[str, None | str | list[float]]:",
        "detail": "services.EmbeddingServices",
        "documentation": {}
    },
    {
        "label": "HomeServices",
        "kind": 6,
        "importPath": "services.HomeServices",
        "description": "services.HomeServices",
        "peekOfCode": "class HomeServices(HomeServicesImpl):\n    def llmAsk(self, question: str) -> JSONResponse:\n        answer = LlmModelServcies.callModel(\n            LLMModel(\n                messages=[\n                    LLMMessageModel(role=LLMMessageRoleEnum.user, content=question)\n                ]\n            )\n        )\n        return JSONResponse(",
        "detail": "services.HomeServices",
        "documentation": {}
    },
    {
        "label": "LlmModelServcies",
        "kind": 6,
        "importPath": "services.LlmModelServcies",
        "description": "services.LlmModelServcies",
        "peekOfCode": "class LlmModelServcies:\n    llm = cast(Any, Groq(api_key=os.getenv(\"GROQ_API_KEY\")))\n    @staticmethod\n    def callModel( model: LLMModel) -> str:\n        params: Dict[str, Any] = {\n            \"messages\": model.messages,\n            \"model\": model.model,\n            \"max_completion_tokens\": model.maxTokens,\n            \"temperature\": model.temperature,\n            \"stream\": model.stream,",
        "detail": "services.LlmModelServcies",
        "documentation": {}
    },
    {
        "label": "mediRetrieveAi",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "mediRetrieveAi = FastAPI()\nmediRetrieveAi.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"* \"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n@mediRetrieveAi.exception_handler(RequestValidationError)\nasync def validation_exception_handler():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CustomMidlleware",
        "kind": 6,
        "importPath": "middleware",
        "description": "middleware",
        "peekOfCode": "class CustomMidlleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next:RequestResponseEndpoint):\n        try:\n            response = await call_next(request)\n            if response.status_code == 404:\n                return JSONResponse(\n                    status_code=404,\n                    content={\"data\": \"INVALID_URL\"},\n                )\n            return response",
        "detail": "middleware",
        "documentation": {}
    }
]